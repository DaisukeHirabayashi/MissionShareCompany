{"remainingRequest":"/Users/k17111kk/TechTrain/techTrain_mission/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/k17111kk/TechTrain/techTrain_mission/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/k17111kk/TechTrain/techTrain_mission/src/views/Home.vue","mtime":1572916934426},{"path":"/Users/k17111kk/TechTrain/techTrain_mission/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/k17111kk/TechTrain/techTrain_mission/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/k17111kk/TechTrain/techTrain_mission/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/Users/k17111kk/TechTrain/techTrain_mission/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/k17111kk/TechTrain/techTrain_mission/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vIGZpcmViYXNlIOODouOCuOODpeODvOODqwppbXBvcnQgZmlyZWJhc2UgZnJvbSAiZmlyZWJhc2UiOwppbXBvcnQgeyBtYXBTdGF0ZSwgbWFwTXV0YXRpb25zIH0gZnJvbSAidnVleCI7CmltcG9ydCB7IENPTVBBTllfVVBEQVRFIH0gZnJvbSAiLi4vc3RvcmUvbXV0YXRpb24tdHlwZXMiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogImhvbWUiLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB1c2VyOiB7fSwgLy8g44Om44O844K244O85oOF5aCxCiAgICAgIGNvbXBhbnlzOiBbXSwgLy8g5Y+W5b6X44GX44Gf44Oh44OD44K744O844K444KS5YWl44KM44KL6YWN5YiXCiAgICAgIGlucHV0OiAiIiAvLyDlhaXlipvjgZfjgZ/jg6Hjg4Pjgrvjg7zjgrgKICAgIH07CiAgfSwKICBjcmVhdGVkKCkgewogICAgZmlyZWJhc2UuYXV0aCgpLm9uQXV0aFN0YXRlQ2hhbmdlZCh1c2VyID0+IHsKICAgICAgdGhpcy51c2VyID0gdXNlciA/IHVzZXIgOiB7fTsKICAgICAgY29uc3QgY29tcGFueURhdGEgPSBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigiY29tcGFueSIpOwogICAgICBpZiAodXNlcikgewogICAgICAgIHRoaXMuY29tcGFueXMgPSBbXTsKICAgICAgICAvLyBjb21wYW55IOOBq+WkieabtOOBjOOBguOBo+OBn+OBqOOBjeOBruODj+ODs+ODieODqeOCkueZu+mMsgogICAgICAgIGNvbXBhbnlEYXRhLmxpbWl0VG9MYXN0KDEwMCkub24oImNoaWxkX2FkZGVkIiwgdGhpcy5jaGlsZEFkZGVkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBjb21wYW55IOOBq+WkieabtOOBjOOBguOBo+OBn+OBqOOBjeOBruODj+ODs+ODieODqeOCkuino+mZpAogICAgICAgIGNvbXBhbnlEYXRhLmxpbWl0VG9MYXN0KDEwMCkub2ZmKCJjaGlsZF9hZGRlZCIsIHRoaXMuY2hpbGRBZGRlZCk7CiAgICAgIH0KICAgIH0pOwogIH0sCiAgbWV0aG9kczogewogICAgLy8g44K544Kv44Ot44O844Or5L2N572u44KS5LiA55Wq5LiL44Gr56e75YuVCiAgICAvLyDjg63jgrDjgqTjg7Plh6bnkIYKICAgIGRvTG9naW4oKSB7CiAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyKCk7CiAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoUG9wdXAocHJvdmlkZXIpOwogICAgfSwKICAgIC4uLm1hcE11dGF0aW9ucyh7CiAgICAgIENPTVBBTllfVVBEQVRFCiAgICB9KSwKICAgIC8vIOODreOCsOOCouOCpuODiOWHpueQhgogICAgZG9Mb2dvdXQoKSB7CiAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduT3V0KCk7CiAgICAgIGxvY2F0aW9uLnJlbG9hZCgpOwogICAgfSwKICAgIHNjcm9sbEJvdHRvbSgpIHsKICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodCk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOWPl+OBkeWPluOBo+OBn+ODoeODg+OCu+ODvOOCuOOCkmNvbXBhbnlz44Gr6L+95YqgCiAgICAvLyDjg4fjg7zjgr/jg5njg7zjgrnjgavmlrDjgZfjgYTopoHntKDjgYzov73liqDjgZXjgozjgovjgajpmo/mmYLlkbzjgbPlh7rjgZXjgozjgosKICAgIGNoaWxkQWRkZWQoc25hcCkgewogICAgICBjb25zdCBjb21wYW55ID0gc25hcC52YWwoKTsKICAgICAgdGhpcy5jb21wYW55cy5wdXNoKHsKICAgICAgICBrZXk6IHNuYXAua2V5LAogICAgICAgIGRheTogY29tcGFueS5kYXksCiAgICAgICAgZmVlbDogY29tcGFueS5mZWVsLAogICAgICAgIHBsYWNlOiBjb21wYW55LnBsYWNlLAogICAgICAgIG5hbWU6IGNvbXBhbnkubmFtZQogICAgICB9KTsKICAgICAgdGhpcy5zY3JvbGxCb3R0b20oKTsKICAgIH0sCiAgICBkZWxldGVDb21wYW55KGtleSkgewogICAgICBmaXJlYmFzZQogICAgICAgIC5kYXRhYmFzZSgpCiAgICAgICAgLnJlZigiY29tcGFueS8iICsga2V5KQogICAgICAgIC5zZXQoe30pOyAvL+S8muekvuaDheWgseOBruWJiumZpAogICAgICBmaXJlYmFzZQogICAgICAgIC5kYXRhYmFzZSgpCiAgICAgICAgLnJlZigiY29tbWVudC8iICsga2V5KQogICAgICAgIC5zZXQoe30pOyAvL+OBguOCi+S8muekvuOBq+WvvuOBmeOCi+OCs+ODoeODs+ODiOOBruWJiumZpAogICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgIH0sCiAgICBjb21wYW55U2VuZChzdHIpIHsKICAgICAgdGhpcy5DT01QQU5ZX1VQREFURShzdHIpOyAvL+S8muekvuaDheWgseOCkuips+e0sOeUu+mdouOBq+mAgeOCiwogICAgfQogIH0KfTsK"},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"home\">\n    <div id=\"app\">\n      <header class=\"header\">\n        <h1>インターン情報サイト</h1>\n        <!-- ログイン時にはフォームとログアウトボタンを表示 -->\n        <div v-if=\"user.uid\" key=\"login\">\n          [{{ user.displayName }}]\n          <button type=\"button\" @click=\"doLogout\">ログアウト</button>\n        </div>\n        <!-- 未ログイン時にはログインボタンを表示 -->\n        <div v-else key=\"logout\">\n          <button type=\"button\" @click=\"doLogin\">ログイン</button>\n        </div>\n      </header>\n\n      <!--Firebase から取得したリストを描画（トランジション付き）-->\n      <transition-group name=\"company\" tag=\"div\" class=\"list content\">\n        <section\n          v-for=\"{ key, name, day, place, feel } in companys\"\n          :key=\"key\"\n          class=\"item\"\n        >\n          <router-link\n            to=\"./detail\"\n            @click.native=\"companySend({ key, name, day, place, feel })\"\n            >{{ name }}</router-link\n          >\n          <button type=\"button\" @click=\"deleteCompany(key)\">削除</button>\n        </section>\n      </transition-group>\n    </div>\n  </div>\n</template>\n\n<script>\n// firebase モジュール\nimport firebase from \"firebase\";\nimport { mapState, mapMutations } from \"vuex\";\nimport { COMPANY_UPDATE } from \"../store/mutation-types\";\nexport default {\n  name: \"home\",\n  data() {\n    return {\n      user: {}, // ユーザー情報\n      companys: [], // 取得したメッセージを入れる配列\n      input: \"\" // 入力したメッセージ\n    };\n  },\n  created() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.user = user ? user : {};\n      const companyData = firebase.database().ref(\"company\");\n      if (user) {\n        this.companys = [];\n        // company に変更があったときのハンドラを登録\n        companyData.limitToLast(100).on(\"child_added\", this.childAdded);\n      } else {\n        // company に変更があったときのハンドラを解除\n        companyData.limitToLast(100).off(\"child_added\", this.childAdded);\n      }\n    });\n  },\n  methods: {\n    // スクロール位置を一番下に移動\n    // ログイン処理\n    doLogin() {\n      const provider = new firebase.auth.GoogleAuthProvider();\n      firebase.auth().signInWithPopup(provider);\n    },\n    ...mapMutations({\n      COMPANY_UPDATE\n    }),\n    // ログアウト処理\n    doLogout() {\n      firebase.auth().signOut();\n      location.reload();\n    },\n    scrollBottom() {\n      this.$nextTick(() => {\n        window.scrollTo(0, document.body.clientHeight);\n      });\n    },\n    // 受け取ったメッセージをcompanysに追加\n    // データベースに新しい要素が追加されると随時呼び出される\n    childAdded(snap) {\n      const company = snap.val();\n      this.companys.push({\n        key: snap.key,\n        day: company.day,\n        feel: company.feel,\n        place: company.place,\n        name: company.name\n      });\n      this.scrollBottom();\n    },\n    deleteCompany(key) {\n      firebase\n        .database()\n        .ref(\"company/\" + key)\n        .set({}); //会社情報の削除\n      firebase\n        .database()\n        .ref(\"comment/\" + key)\n        .set({}); //ある会社に対するコメントの削除\n      location.reload();\n    },\n    companySend(str) {\n      this.COMPANY_UPDATE(str); //会社情報を詳細画面に送る\n    }\n  }\n};\n</script>\n"]}]}