{"remainingRequest":"/Users/k17111kk/TechTrain/google-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/k17111kk/TechTrain/google-auth/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/k17111kk/TechTrain/google-auth/src/App.vue","mtime":1572266215118},{"path":"/Users/k17111kk/TechTrain/google-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/k17111kk/TechTrain/google-auth/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/k17111kk/TechTrain/google-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/k17111kk/TechTrain/google-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vIGZpcmViYXNlIOODouOCuOODpeODvOODqwppbXBvcnQgZmlyZWJhc2UgZnJvbSAiZmlyZWJhc2UiOwovLyDmlLnooYzjgpIgPGJyPiDjgr/jgrDjgavlpInmj5vjgZnjgovjg6Ljgrjjg6Xjg7zjg6sKaW1wb3J0IE5sMmJyIGZyb20gInZ1ZS1ubDJiciI7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7IE5sMmJyIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHVzZXI6IHt9LCAvLyDjg6bjg7zjgrbjg7zmg4XloLEKICAgICAgY2hhdDogW10sIC8vIOWPluW+l+OBl+OBn+ODoeODg+OCu+ODvOOCuOOCkuWFpeOCjOOCi+mFjeWIlwogICAgICBpbnB1dDogIiIgLy8g5YWl5Yqb44GX44Gf44Oh44OD44K744O844K4CiAgICB9OwogIH0sCiAgY3JlYXRlZCgpIHsKICAgIGZpcmViYXNlLmF1dGgoKS5vbkF1dGhTdGF0ZUNoYW5nZWQodXNlciA9PiB7CiAgICAgIHRoaXMudXNlciA9IHVzZXIgPyB1c2VyIDoge307CiAgICAgIGNvbnN0IHJlZl9tZXNzYWdlID0gZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoIm1lc3NhZ2UiKTsKICAgICAgaWYgKHVzZXIpIHsKICAgICAgICB0aGlzLmNoYXQgPSBbXTsKICAgICAgICAvLyBtZXNzYWdlIOOBq+WkieabtOOBjOOBguOBo+OBn+OBqOOBjeOBruODj+ODs+ODieODqeOCkueZu+mMsgogICAgICAgIHJlZl9tZXNzYWdlLmxpbWl0VG9MYXN0KDEwKS5vbigiY2hpbGRfYWRkZWQiLCB0aGlzLmNoaWxkQWRkZWQpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIG1lc3NhZ2Ug44Gr5aSJ5pu044GM44GC44Gj44Gf44Go44GN44Gu44OP44Oz44OJ44Op44KS6Kej6ZmkCiAgICAgICAgcmVmX21lc3NhZ2UubGltaXRUb0xhc3QoMTApLm9mZigiY2hpbGRfYWRkZWQiLCB0aGlzLmNoaWxkQWRkZWQpOwogICAgICB9CiAgICB9KTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIOODreOCsOOCpOODs+WHpueQhgogICAgZG9Mb2dpbigpIHsKICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIoKTsKICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhQb3B1cChwcm92aWRlcik7CiAgICB9LAogICAgLy8g44Ot44Kw44Ki44Km44OI5Yem55CGCiAgICBkb0xvZ291dCgpIHsKICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25PdXQoKTsKICAgIH0sCiAgICAvLyDjgrnjgq/jg63jg7zjg6vkvY3nva7jgpLkuIDnlarkuIvjgavnp7vli5UKICAgIHNjcm9sbEJvdHRvbSgpIHsKICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodCk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOWPl+OBkeWPluOBo+OBn+ODoeODg+OCu+ODvOOCuOOCkmNoYXTjgavov73liqAKICAgIC8vIOODh+ODvOOCv+ODmeODvOOCueOBq+aWsOOBl+OBhOimgee0oOOBjOi/veWKoOOBleOCjOOCi+OBqOmaj+aZguWRvOOBs+WHuuOBleOCjOOCiwogICAgY2hpbGRBZGRlZChzbmFwKSB7CiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBzbmFwLnZhbCgpOwogICAgICB0aGlzLmNoYXQucHVzaCh7CiAgICAgICAga2V5OiBzbmFwLmtleSwKICAgICAgICBuYW1lOiBtZXNzYWdlLm5hbWUsCiAgICAgICAgaW1hZ2U6IG1lc3NhZ2UuaW1hZ2UsCiAgICAgICAgbWVzc2FnZTogbWVzc2FnZS5tZXNzYWdlCiAgICAgIH0pOwogICAgICB0aGlzLnNjcm9sbEJvdHRvbSgpOwogICAgfSwKICAgIGRvU2VuZCgpIHsKICAgICAgaWYgKHRoaXMudXNlci51aWQgJiYgdGhpcy5pbnB1dC5sZW5ndGgpIHsKICAgICAgICAvLyBmaXJlYmFzZSDjgavjg6Hjg4Pjgrvjg7zjgrjjgpLov73liqAKICAgICAgICBmaXJlYmFzZQogICAgICAgICAgLmRhdGFiYXNlKCkKICAgICAgICAgIC5yZWYoIm1lc3NhZ2UiKQogICAgICAgICAgLnB1c2goCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBtZXNzYWdlOiB0aGlzLmlucHV0LAogICAgICAgICAgICAgIG5hbWU6IHRoaXMudXNlci5kaXNwbGF5TmFtZSwKICAgICAgICAgICAgICBpbWFnZTogdGhpcy51c2VyLnBob3RvVVJMCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICgpID0+IHsKICAgICAgICAgICAgICB0aGlzLmlucHV0ID0gIiI7IC8vIOODleOCqeODvOODoOOCkuepuuOBq+OBmeOCiwogICAgICAgICAgICB9CiAgICAgICAgICApOwogICAgICB9CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <header class=\"header\">\n      <h1>Chat</h1>\n      <!-- ログイン時にはフォームとログアウトボタンを表示 -->\n      <div v-if=\"user.uid\" key=\"login\">\n        [{{ user.displayName }}]\n        <button type=\"button\" @click=\"doLogout\">ログアウト</button>\n      </div>\n      <!-- 未ログイン時にはログインボタンを表示 -->\n      <div v-else key=\"logout\">\n        <button type=\"button\" @click=\"doLogin\">ログイン</button>\n      </div>\n    </header>\n\n    <!--Firebase から取得したリストを描画（トランジション付き）-->\n    <transition-group name=\"chat\" tag=\"div\" class=\"list content\">\n      <section\n        v-for=\"{ key, name, image, message } in chat\"\n        :key=\"key\"\n        class=\"item\"\n      >\n        <div class=\"item-image\">\n          <img :src=\"image\" width=\"40\" height=\"40\" />\n        </div>\n        <div class=\"item-detail\">\n          <div class=\"item-name\">{{ name }}</div>\n          <div class=\"item-message\">\n            <nl2br tag=\"div\" :text=\"message\" />\n          </div>\n        </div>\n      </section>\n    </transition-group>\n\n    <!-- 入力フォーム -->\n    <form action=\"\" @submit.prevent=\"doSend\" class=\"form\">\n      <textarea\n        v-model=\"input\"\n        :disabled=\"!user.uid\"\n        @keydown.enter.exact.prevent=\"doSend\"\n      ></textarea>\n      <button type=\"submit\" :disabled=\"!user.uid\" class=\"send-button\">\n        Send\n      </button>\n    </form>\n  </div>\n</template>\n\n<script>\n// firebase モジュール\nimport firebase from \"firebase\";\n// 改行を <br> タグに変換するモジュール\nimport Nl2br from \"vue-nl2br\";\nexport default {\n  components: { Nl2br },\n  data() {\n    return {\n      user: {}, // ユーザー情報\n      chat: [], // 取得したメッセージを入れる配列\n      input: \"\" // 入力したメッセージ\n    };\n  },\n  created() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.user = user ? user : {};\n      const ref_message = firebase.database().ref(\"message\");\n      if (user) {\n        this.chat = [];\n        // message に変更があったときのハンドラを登録\n        ref_message.limitToLast(10).on(\"child_added\", this.childAdded);\n      } else {\n        // message に変更があったときのハンドラを解除\n        ref_message.limitToLast(10).off(\"child_added\", this.childAdded);\n      }\n    });\n  },\n  methods: {\n    // ログイン処理\n    doLogin() {\n      const provider = new firebase.auth.GoogleAuthProvider();\n      firebase.auth().signInWithPopup(provider);\n    },\n    // ログアウト処理\n    doLogout() {\n      firebase.auth().signOut();\n    },\n    // スクロール位置を一番下に移動\n    scrollBottom() {\n      this.$nextTick(() => {\n        window.scrollTo(0, document.body.clientHeight);\n      });\n    },\n    // 受け取ったメッセージをchatに追加\n    // データベースに新しい要素が追加されると随時呼び出される\n    childAdded(snap) {\n      const message = snap.val();\n      this.chat.push({\n        key: snap.key,\n        name: message.name,\n        image: message.image,\n        message: message.message\n      });\n      this.scrollBottom();\n    },\n    doSend() {\n      if (this.user.uid && this.input.length) {\n        // firebase にメッセージを追加\n        firebase\n          .database()\n          .ref(\"message\")\n          .push(\n            {\n              message: this.input,\n              name: this.user.displayName,\n              image: this.user.photoURL\n            },\n            () => {\n              this.input = \"\"; // フォームを空にする\n            }\n          );\n      }\n    }\n  }\n};\n</script>\n"]}]}